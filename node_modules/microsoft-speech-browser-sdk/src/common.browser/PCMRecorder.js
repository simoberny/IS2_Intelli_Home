"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = require("../common/Exports");
var PcmRecorder = /** @class */ (function () {
    function PcmRecorder() {
        var _this = this;
        this.Record = function (mediaStream, outputStream) {
            // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext
            var audioContext = new AudioContext();
            // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamSource
            var mediaStreamSource = audioContext.createMediaStreamSource(mediaStream);
            var desiredSampleRate = 16000;
            // let compressionRatio = mediaStreamSource.context.sampleRate / desiredSampleRate;
            var bufferSize = 2048;
            var isFirstFrameWritten = false;
            if (desiredSampleRate * 4 <= mediaStreamSource.context.sampleRate) {
                bufferSize = 8192;
            }
            else if (desiredSampleRate * 2 <= mediaStreamSource.context.sampleRate) {
                bufferSize = 4096;
            }
            // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createScriptProcessor
            var scriptNode = mediaStreamSource.context.createScriptProcessor(bufferSize, 1, 1);
            var waveStreamEncoder = new Exports_1.RiffPcmEncoder(mediaStreamSource.context.sampleRate, desiredSampleRate);
            scriptNode.onaudioprocess = function (audioProcessingEvent) {
                var monoAudioChunk = audioProcessingEvent.inputBuffer.getChannelData(0);
                var encodedAudioFrameWithRiffHeader;
                var encodedAudioFrame;
                if (outputStream) {
                    if (isFirstFrameWritten) {
                        if (!encodedAudioFrame) {
                            encodedAudioFrame = waveStreamEncoder.Encode(false, monoAudioChunk);
                        }
                        outputStream.Write(encodedAudioFrame);
                    }
                    else {
                        if (!encodedAudioFrameWithRiffHeader) {
                            encodedAudioFrameWithRiffHeader =
                                waveStreamEncoder.Encode(true, monoAudioChunk);
                        }
                        outputStream.Write(encodedAudioFrameWithRiffHeader);
                        isFirstFrameWritten = true;
                    }
                }
            };
            _this.mediaResources = {
                context: audioContext,
                scriptProcessorNode: scriptNode,
                source: mediaStreamSource,
                stream: mediaStream,
            };
            mediaStreamSource.connect(scriptNode);
            scriptNode.connect(mediaStreamSource.context.destination);
        };
        this.ReleaseMediaResources = function () {
            if (_this.mediaResources) {
                if (_this.mediaResources.scriptProcessorNode) {
                    _this.mediaResources.scriptProcessorNode.disconnect();
                    _this.mediaResources.scriptProcessorNode = null;
                }
                if (_this.mediaResources.source) {
                    _this.mediaResources.source.disconnect();
                    _this.mediaResources.stream.getTracks().forEach(function (track) { return track.stop(); });
                    _this.mediaResources.source = null;
                }
                if (_this.mediaResources.context && _this.mediaResources.context.state !== "closed") {
                    _this.mediaResources.context.close();
                }
            }
        };
    }
    return PcmRecorder;
}());
exports.PcmRecorder = PcmRecorder;
